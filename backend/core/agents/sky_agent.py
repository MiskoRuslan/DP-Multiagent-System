from crewai import Agent, Task, Crew, Process
from langchain_openai import ChatOpenAI
from crewai.tools import tool
from datetime import datetime, timezone, timedelta
import asyncio
import json
from typing import List, Optional, Dict, Any
import re

from backend.clients.open_sky_client import OpenSkyClient


# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à OpenSky –∫–ª—ñ—î–Ω—Ç
# from backend.clients.opensky_client import OpenSkyClient  # –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö


@tool("get_current_aircraft_states")
def get_current_aircraft_states_tool(bbox: Optional[str] = None,
                                     icao24: Optional[str] = None) -> str:
    """
    Get current aircraft state vectors in the specified area or for specific aircraft.

    Args:
        bbox: Bounding box as string "lat_min,lon_min,lat_max,lon_max" (e.g., "49.0,29.0,51.0,31.0" for Ukraine area)
        icao24: Specific aircraft ICAO24 code (e.g., "4b1807")

    Returns:
        Formatted HTML string with aircraft information
    """
    try:
        client = OpenSkyClient()

        # –ü–∞—Ä—Å–∏–º–æ bbox —è–∫—â–æ –Ω–∞–¥–∞–Ω–æ
        bbox_params = None
        if bbox:
            coords = [float(x.strip()) for x in bbox.split(',')]
            if len(coords) == 4:
                bbox_params = tuple(coords)

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞–Ω–∏ –ª—ñ—Ç–∞–∫—ñ–≤
        states = client.get_states(bbox=bbox_params, icao24=icao24)

        if not states:
            return _create_empty_result_html(
                "–ù–∞—Ä–∞–∑—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ª—ñ—Ç–∞–∫—ñ–≤ —É –≤–∫–∞–∑–∞–Ω—ñ–π –∑–æ–Ω—ñ")

        # –°—Ç–≤–æ—Ä—é—î–º–æ HTML
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        html = f"""
        <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 20px auto; padding: 20px; 
                    border: 2px solid #2196F3; border-radius: 15px; background: linear-gradient(135deg, #e1f5fe 0%, #b3e5fc 100%);
                    box-shadow: 0 4px 8px rgba(0,0,0,0.1);">

            <h2 style="text-align: center; color: #0277bd; margin-bottom: 20px; font-size: 24px;">
                ‚úàÔ∏è –ü–æ—Ç–æ—á–Ω—ñ –∞–≤—ñ–∞—Ä–µ–π—Å–∏
            </h2>

            <div style="background: rgba(255,255,255,0.8); padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                <p style="margin: 5px 0; color: #666;">
                    <strong>–ó–Ω–∞–π–¥–µ–Ω–æ –ª—ñ—Ç–∞–∫—ñ–≤:</strong> {len(states)} | 
                    <strong>–û–Ω–æ–≤–ª–µ–Ω–æ:</strong> {timestamp}
                </p>
                {f'<p style="margin: 5px 0; color: #666;"><strong>–ó–æ–Ω–∞:</strong> {bbox}</p>' if bbox else ''}
                {f'<p style="margin: 5px 0; color: #666;"><strong>ICAO24:</strong> {icao24}</p>' if icao24 else ''}
            </div>

            <div style="display: grid; gap: 15px;">
                {"".join([_create_aircraft_card(state) for state in states[:10]])}
            </div>

            {f'<p style="text-align: center; color: #666; margin-top: 15px; font-style: italic;">–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä—à—ñ 10 –∑ {len(states)} –ª—ñ—Ç–∞–∫—ñ–≤</p>' if len(states) > 10 else ''}
        </div>
        """

        return html

    except Exception as e:
        return _create_error_html("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ª—ñ—Ç–∞–∫–∏", str(e))


@tool("get_aircraft_flights")
def get_aircraft_flights_tool(icao24: str, days_back: int = 7) -> str:
    """
    Get flight history for specific aircraft.

    Args:
        icao24: Aircraft ICAO24 code (e.g., "4b1807")
        days_back: Number of days to look back (default: 7)

    Returns:
        Formatted HTML string with flight history
    """
    try:
        client = OpenSkyClient()
        current_time = client.get_current_timestamp()
        begin_time = current_time - days_back * 24 * 3600

        flights = client.get_flights_by_aircraft(icao24, begin_time, current_time)

        if not flights:
            return _create_empty_result_html(
                f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å—ñ–≤ –¥–ª—è –ª—ñ—Ç–∞–∫–∞ {icao24} –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {days_back} –¥–Ω—ñ–≤")

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        html = f"""
        <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 20px auto; padding: 20px; 
                    border: 2px solid #FF9800; border-radius: 15px; background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
                    box-shadow: 0 4px 8px rgba(0,0,0,0.1);">

            <h2 style="text-align: center; color: #ef6c00; margin-bottom: 20px; font-size: 24px;">
                üõ´ –Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–π—Å—ñ–≤ –ª—ñ—Ç–∞–∫–∞
            </h2>

            <div style="background: rgba(255,255,255,0.8); padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                <p style="margin: 5px 0; color: #666;">
                    <strong>ICAO24:</strong> {icao24} | 
                    <strong>–ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å—ñ–≤:</strong> {len(flights)} | 
                    <strong>–ü–µ—Ä—ñ–æ–¥:</strong> {days_back} –¥–Ω—ñ–≤
                </p>
                <p style="margin: 5px 0; color: #666; font-size: 12px;">
                    <em>–û–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</em>
                </p>
            </div>

            <div style="display: grid; gap: 10px;">
                {"".join([_create_flight_card(flight) for flight in flights])}
            </div>
        </div>
        """

        return html

    except Exception as e:
        return _create_error_html("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–µ–π—Å—ñ–≤", str(e))


@tool("get_airport_flights")
def get_airport_flights_tool(airport_code: str, flight_type: str = "both",
                             days_back: int = 1) -> str:
    """
    Get flights for specific airport (arrivals, departures or both).

    Args:
        airport_code: ICAO airport code (e.g., "UKBB" for Kyiv Boryspil, "EDDF" for Frankfurt)
        flight_type: Type of flights - "arrivals", "departures", or "both" (default: "both")
        days_back: Number of days to look back (default: 1)

    Returns:
        Formatted HTML string with airport flights information
    """
    try:
        client = OpenSkyClient()
        current_time = client.get_current_timestamp()
        begin_time = current_time - days_back * 24 * 3600

        arrivals = []
        departures = []

        if flight_type in ["arrivals", "both"]:
            arrivals = client.get_arrivals_by_airport(airport_code, begin_time,
                                                      current_time)

        if flight_type in ["departures", "both"]:
            departures = client.get_departures_by_airport(airport_code, begin_time,
                                                          current_time)

        if not arrivals and not departures:
            return _create_empty_result_html(
                f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å—ñ–≤ –¥–ª—è –∞–µ—Ä–æ–ø–æ—Ä—Ç—É {airport_code}")

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        html = f"""
        <div style="font-family: Arial, sans-serif; max-width: 900px; margin: 20px auto; padding: 20px; 
                    border: 2px solid #4CAF50; border-radius: 15px; background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
                    box-shadow: 0 4px 8px rgba(0,0,0,0.1);">

            <h2 style="text-align: center; color: #2e7d32; margin-bottom: 20px; font-size: 24px;">
                üè¢ –†–µ–π—Å–∏ –∞–µ—Ä–æ–ø–æ—Ä—Ç—É {airport_code}
            </h2>

            <div style="background: rgba(255,255,255,0.8); padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                <p style="margin: 5px 0; color: #666;">
                    <strong>–ê–µ—Ä–æ–ø–æ—Ä—Ç:</strong> {airport_code} | 
                    <strong>–ü—Ä–∏–ª—å–æ—Ç—ñ–≤:</strong> {len(arrivals)} | 
                    <strong>–í–∏–ª—å–æ—Ç—ñ–≤:</strong> {len(departures)} | 
                    <strong>–ü–µ—Ä—ñ–æ–¥:</strong> {days_back} –¥.
                </p>
                <p style="margin: 5px 0; color: #666; font-size: 12px;">
                    <em>–û–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</em>
                </p>
            </div>

            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                {_create_airport_section("–ü—Ä–∏–ª—å–æ—Ç–∏ ‚úàÔ∏è‚¨áÔ∏è", arrivals, "#4CAF50") if arrivals else ""}
                {_create_airport_section("–í–∏–ª—å–æ—Ç–∏ ‚úàÔ∏è‚¨ÜÔ∏è", departures, "#FF9800") if departures else ""}
            </div>
        </div>
        """

        return html

    except Exception as e:
        return _create_error_html("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–µ—Ä–æ–ø–æ—Ä—Ç—É", str(e))


@tool("get_aircraft_track")
def get_aircraft_track_tool(icao24: str, hours_back: int = 1) -> str:
    """
    Get flight track for aircraft.

    Args:
        icao24: Aircraft ICAO24 code
        hours_back: Hours back from current time to get track (default: 1)

    Returns:
        Formatted HTML string with track information
    """
    try:
        client = OpenSkyClient()
        track_time = client.get_current_timestamp() - hours_back * 3600

        tracks = client.get_track_by_aircraft(icao24, track_time)

        if not tracks:
            return _create_empty_result_html(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫—É –¥–ª—è –ª—ñ—Ç–∞–∫–∞ {icao24}")

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        html = f"""
        <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 20px auto; padding: 20px; 
                    border: 2px solid #9C27B0; border-radius: 15px; background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);
                    box-shadow: 0 4px 8px rgba(0,0,0,0.1);">

            <h2 style="text-align: center; color: #7b1fa2; margin-bottom: 20px; font-size: 24px;">
                üõ§Ô∏è –¢—Ä–µ–∫ –ø–æ–ª—å–æ—Ç—É –ª—ñ—Ç–∞–∫–∞
            </h2>

            <div style="background: rgba(255,255,255,0.8); padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                <p style="margin: 5px 0; color: #666;">
                    <strong>ICAO24:</strong> {icao24} | 
                    <strong>–¢–æ—á–æ–∫ —Ç—Ä–µ–∫—É:</strong> {len(tracks)} | 
                    <strong>–ü–µ—Ä—ñ–æ–¥:</strong> {hours_back} –≥–æ–¥ –Ω–∞–∑–∞–¥
                </p>
                <p style="margin: 5px 0; color: #666; font-size: 12px;">
                    <em>–û–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</em>
                </p>
            </div>

            <div style="background: rgba(255,255,255,0.9); padding: 15px; border-radius: 10px;">
                <h3 style="color: #424242; margin-top: 0;">üìç –¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç—É</h3>
                <div style="max-height: 400px; overflow-y: auto;">
                    {"".join([_create_track_point(track, i) for i, track in enumerate(tracks)])}
                </div>
            </div>
        </div>
        """

        return html

    except Exception as e:
        return _create_error_html("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–µ–∫—É", str(e))


# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
def _create_aircraft_card(state) -> str:
    """–°—Ç–≤–æ—Ä—é—î –∫–∞—Ä—Ç–∫—É –ª—ñ—Ç–∞–∫–∞"""
    status = "üü¢ –£ –ø–æ–≤—ñ—Ç—Ä—ñ" if not state.on_ground else "üî¥ –ù–∞ –∑–µ–º–ª—ñ"

    return f"""
    <div style="background: rgba(255,255,255,0.9); padding: 15px; border-radius: 10px; 
                border-left: 4px solid {'#4CAF50' if not state.on_ground else '#f44336'};">
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
            <div>
                <strong style="color: #1976d2;">‚úàÔ∏è {state.callsign or 'N/A'}</strong>
                <br><small>ICAO24: {state.icao24}</small>
            </div>
            <div style="text-align: right;">
                <span style="font-size: 12px; padding: 4px 8px; border-radius: 12px; 
                           background: {'rgba(76, 175, 80, 0.2)' if not state.on_ground else 'rgba(244, 67, 54, 0.2)'};">
                    {status}
                </span>
            </div>
        </div>

        <div style="margin-top: 10px; display: grid; grid-template-columns: 1fr 1fr; gap: 5px; font-size: 13px;">
            <div><strong>üåç –ö—Ä–∞—ó–Ω–∞:</strong> {state.origin_country}</div>
            <div><strong>üìç –ü–æ–∑–∏—Ü—ñ—è:</strong> {f'{state.latitude:.3f}, {state.longitude:.3f}' if state.latitude and state.longitude else 'N/A'}</div>
            <div><strong>üìè –í–∏—Å–æ—Ç–∞:</strong> {f'{state.baro_altitude:.0f} –º' if state.baro_altitude else 'N/A'}</div>
            <div><strong>üèÉ –®–≤–∏–¥–∫—ñ—Å—Ç—å:</strong> {f'{state.velocity:.0f} –º/—Å' if state.velocity else 'N/A'}</div>
        </div>
    </div>
    """


def _create_flight_card(flight) -> str:
    """–°—Ç–≤–æ—Ä—é—î –∫–∞—Ä—Ç–∫—É —Ä–µ–π—Å—É"""
    dep_time = datetime.fromtimestamp(flight.first_seen, tz=timezone.utc).strftime(
        "%d.%m %H:%M") if flight.first_seen else "N/A"
    arr_time = datetime.fromtimestamp(flight.last_seen, tz=timezone.utc).strftime(
        "%d.%m %H:%M") if flight.last_seen else "N/A"

    return f"""
    <div style="background: rgba(255,255,255,0.9); padding: 12px; border-radius: 8px; 
                border-left: 4px solid #FF9800;">
        <div style="display: grid; grid-template-columns: 1fr auto 1fr; gap: 15px; align-items: center;">
            <div style="text-align: left;">
                <strong style="color: #ef6c00;">üõ´ {flight.est_departure_airport or 'N/A'}</strong>
                <br><small>{dep_time}</small>
            </div>

            <div style="text-align: center;">
                <strong style="color: #1976d2;">‚úàÔ∏è {flight.callsign or 'N/A'}</strong>
                <br><small style="color: #666;">‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ñ∂</small>
            </div>

            <div style="text-align: right;">
                <strong style="color: #ef6c00;">üõ¨ {flight.est_arrival_airport or 'N/A'}</strong>
                <br><small>{arr_time}</small>
            </div>
        </div>
    </div>
    """


def _create_airport_section(title: str, flights: List, color: str) -> str:
    """–°—Ç–≤–æ—Ä—é—î —Å–µ–∫—Ü—ñ—é –¥–ª—è —Ä–µ–πs—ñ–≤ –∞–µ—Ä–æ–ø–æ—Ä—Ç—É"""
    if not flights:
        return ""

    return f"""
    <div style="background: rgba(255,255,255,0.9); padding: 15px; border-radius: 10px;">
        <h3 style="color: {color}; margin-top: 0; text-align: center;">{title}</h3>
        <div style="max-height: 300px; overflow-y: auto;">
            {"".join([_create_simple_flight_card(flight) for flight in flights[:15]])}
        </div>
        {f'<p style="text-align: center; color: #666; font-size: 12px; margin-top: 10px;">–ü–æ–∫–∞–∑–∞–Ω–æ 15 –∑ {len(flights)}</p>' if len(flights) > 15 else ''}
    </div>
    """


def _create_simple_flight_card(flight) -> str:
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Å—Ç—É –∫–∞—Ä—Ç–∫—É —Ä–µ–π—Å—É –¥–ª—è –∞–µ—Ä–æ–ø–æ—Ä—Ç—É"""
    return f"""
    <div style="background: rgba(255,255,255,0.7); padding: 8px; margin: 5px 0; border-radius: 6px;">
        <strong>{flight.callsign or 'N/A'}</strong> 
        <span style="color: #666;">
            {flight.est_departure_airport or 'N/A'} ‚Üí {flight.est_arrival_airport or 'N/A'}
        </span>
    </div>
    """


def _create_track_point(track, index: int) -> str:
    """–°—Ç–≤–æ—Ä—é—î —Ç–æ—á–∫—É —Ç—Ä–µ–∫—É"""
    track_time = datetime.fromtimestamp(track.time, tz=timezone.utc).strftime(
        "%H:%M:%S") if track.time else "N/A"

    return f"""
    <div style="background: rgba(255,255,255,0.7); padding: 10px; margin: 5px 0; border-radius: 6px; 
                border-left: 3px solid #9C27B0;">
        <div style="display: grid; grid-template-columns: auto 1fr 1fr 1fr; gap: 10px; align-items: center; font-size: 13px;">
            <strong style="color: #7b1fa2;">#{index + 1}</strong>
            <div><strong>‚è∞</strong> {track_time}</div>
            <div><strong>üìç</strong> {f'{track.latitude:.4f}, {track.longitude:.4f}' if track.latitude and track.longitude else 'N/A'}</div>
            <div><strong>üìè</strong> {f'{track.baro_altitude:.0f} –º' if track.baro_altitude else 'N/A'}</div>
        </div>
    </div>
    """


def _create_error_html(title: str, error: str) -> str:
    """–°—Ç–≤–æ—Ä—é—î HTML –¥–ª—è –ø–æ–º–∏–ª–∫–∏"""
    return f"""
    <div style="font-family: Arial, sans-serif; max-width: 500px; margin: 20px auto; padding: 20px; 
                border: 2px solid #f44336; border-radius: 15px; background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
        <h2 style="text-align: center; color: #d32f2f; margin-bottom: 20px;">‚ùå {title}</h2>
        <div style="background: rgba(255,255,255,0.8); padding: 15px; border-radius: 10px;">
            <p style="color: #d32f2f; margin: 10px 0;"><strong>–ü–æ–º–∏–ª–∫–∞:</strong> {error}</p>
        </div>
    </div>
    """


def _create_empty_result_html(message: str) -> str:
    """–°—Ç–≤–æ—Ä—é—î HTML –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"""
    return f"""
    <div style="font-family: Arial, sans-serif; max-width: 500px; margin: 20px auto; padding: 20px; 
                border: 2px solid #FF9800; border-radius: 15px; background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
        <h2 style="text-align: center; color: #ef6c00; margin-bottom: 20px;">‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h2>
        <div style="background: rgba(255,255,255,0.8); padding: 15px; border-radius: 10px;">
            <p style="color: #666; margin: 10px 0; text-align: center;">{message}</p>
        </div>
    </div>
    """


class OpenSkyAviationAgent:
    """–ê–≥–µ–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞–≤—ñ–∞—Ü—ñ–π–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ OpenSky Network"""

    def __init__(self, agent_id: str, name: str, system_prompt: str = None):
        self.agent_id = agent_id
        self.name = name
        self.llm = ChatOpenAI(model="gpt-4o", temperature=0.7)

        backstory = system_prompt if system_prompt else """
        –í–∏ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –∞–≤—ñ–∞—Ü—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫, —è–∫–∏–π –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –¥–∞–Ω–∏—Ö OpenSky Network.
        –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥–∞–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ:

        1. –ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –ª—ñ—Ç–∞–∫—ñ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
        2. –Ü—Å—Ç–æ—Ä—ñ—é —Ä–µ–π—Å—ñ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –ª—ñ—Ç–∞–∫—ñ–≤
        3. –†–µ–π—Å–∏ –∞–µ—Ä–æ–ø–æ—Ä—Ç—ñ–≤ (–ø—Ä–∏–ª—å–æ—Ç–∏ —Ç–∞ –≤–∏–ª—å–æ—Ç–∏)
        4. –¢—Ä–µ–∫–∏ –ø–æ–ª—å–æ—Ç—ñ–≤ –ª—ñ—Ç–∞–∫—ñ–≤

        –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞–ø–∏—Ç—É—é—Ç—å –ø—Ä–æ –∞–≤—ñ–∞—Ü—ñ—é, –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ:
        - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        - –Ü–Ω—Ç–µ—Ä–ø—Ä–µ—Ç—É–≤–∞—Ç–∏ ICAO –∫–æ–¥–∏ –ª—ñ—Ç–∞–∫—ñ–≤ —Ç–∞ –∞–µ—Ä–æ–ø–æ—Ä—Ç—ñ–≤
        - –ù–∞–¥–∞–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Ç–∞ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        - –ü–æ—è—Å–Ω—é–≤–∞—Ç–∏ –∞–≤—ñ–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—é –º–æ–≤–æ—é

        –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é —Ç–∞ –±—É–¥—å—Ç–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–º–∏ —ñ –∫–æ—Ä–∏—Å–Ω–∏–º–∏.
        """

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–≥–µ–Ω—Ç–∞ –∑ —É—Å—ñ–º–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
        self.agent = Agent(
            role='Expert Aviation Data Analyst',
            goal='Provide comprehensive aviation information using OpenSky Network data',
            backstory=backstory,
            verbose=True,
            allow_delegation=False,
            llm=self.llm,
            tools=[
                get_current_aircraft_states_tool,
                get_aircraft_flights_tool,
                get_airport_flights_tool,
                get_aircraft_track_tool
            ]
        )

    async def process_message(self, message: str) -> str:
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            task = Task(
                description=f"""
                –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω–∞–¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∞–≤—ñ–∞—Ü—ñ–π–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏.

                –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{message}"
                ID –∞–≥–µ–Ω—Ç–∞: {self.agent_id}

                –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:
                - –í–∏–∑–Ω–∞—á—Ç–µ, —è–∫–∏–π —Ç–∏–ø –∞–≤—ñ–∞—Ü—ñ–π–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö:
                  * get_current_aircraft_states - –¥–ª—è –ø–æ—Ç–æ—á–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –ª—ñ—Ç–∞–∫—ñ–≤
                  * get_aircraft_flights - –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–µ–π—Å—ñ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª—ñ—Ç–∞–∫–∞
                  * get_airport_flights - –¥–ª—è —Ä–µ–π—Å—ñ–≤ –∞–µ—Ä–æ–ø–æ—Ä—Ç—É
                  * get_aircraft_track - –¥–ª—è —Ç—Ä–µ–∫—É –ø–æ–ª—å–æ—Ç—É –ª—ñ—Ç–∞–∫–∞

                - –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–π—Ç–µ:
                  * ICAO –∫–æ–¥–∏ –ª—ñ—Ç–∞–∫—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "4b1807")
                  * ICAO –∫–æ–¥–∏ –∞–µ—Ä–æ–ø–æ—Ä—Ç—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "UKBB", "EDDF")
                  * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ –ø–æ—à—É–∫—É
                  * –ß–∞—Å–æ–≤—ñ –ø–µ—Ä—ñ–æ–¥–∏

                - –£ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
                ```html-render
                <–≤–∞—à–∞ HTML –≤—ñ–¥–ø–æ–≤—ñ–¥—å>
                ```

                - –ó–∞–≤–∂–¥–∏ –Ω–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ—Ä–∏—Å–Ω—É, –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
                - –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –ø–æ–ø—Ä–æ—Å—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ó—Ö –Ω–∞–¥–∞—Ç–∏
                """,
                expected_output="–î–µ—Ç–∞–ª—å–Ω–∞ –∞–≤—ñ–∞—Ü—ñ–π–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —É —Ñ–æ—Ä–º–∞—Ç—ñ HTML –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
                agent=self.agent
            )

            crew = Crew(
                agents=[self.agent],
                tasks=[task],
                process=Process.sequential,
                verbose=True
            )

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ crew –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(None, crew.kickoff)

            return str(result)

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ OpenSkyAviationAgent: {str(e)}")
            return (f"–í–∏–±–∞—á—Ç–µ, —è –∑—ñ—Ç–∫–Ω—É–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∞—à–æ–≥–æ "
                    f"–∞–≤—ñ–∞—Ü—ñ–π–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É: {str(e)}")


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    async def test_agent():
        agent = OpenSkyAviationAgent("aviation_001", "AviationExpert")

        # –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
        test_messages = [
            "–ü–æ–∫–∞–∂–∏ –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ—Ç–∞–∫–∏ –≤ –∑–æ–Ω—ñ –£–∫—Ä–∞—ó–Ω–∏ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ 49.0,29.0,51.0,31.0)",
            "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Ä–µ–π—Å–∏ –ª—ñ—Ç–∞–∫–∞ –∑ –∫–æ–¥–æ–º 4b1807 –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –¥–Ω—ñ",
            "–Ø–∫—ñ —Ä–µ–π—Å–∏ –±—É–ª–∏ –≤ –∞–µ—Ä–æ–ø–æ—Ä—Ç—É EDDF –∑–∞ –≤—á–æ—Ä–∞?",
            "–ü–æ–∫–∞–∂–∏ —Ç—Ä–µ–∫ –ø–æ–ª—å–æ—Ç—É –ª—ñ—Ç–∞–∫–∞ 4b1807 –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É"
        ]

        for msg in test_messages:
            print(f"\n--- –¢–µ—Å—Ç: {msg} ---")
            response = await agent.process_message(msg)
            print(response)
            print("\n" + "=" * 80)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
    # asyncio.run(test_agent())
