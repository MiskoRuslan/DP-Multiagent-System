from crewai import Agent, Task, Crew, Process
from crewai.tools import tool
from langchain_openai import ChatOpenAI
import asyncio
import time
from collections import Counter, defaultdict
from typing import Dict, List, Optional, Tuple
import json

from backend.clients.open_sky_client import OpenSkyClient
from backend.clients.windy_client import get_current_weather

# –°–ª–æ–≤–Ω–∏–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫—Ä–∞—ó–Ω (bbox: [min_lat, max_lat, min_lon, max_lon])
COUNTRY_COORDINATES = {
    'poland': [49.0, 54.8, 14.1, 24.2],
    'ukraine': [44.3, 52.4, 22.1, 40.2],
    'germany': [47.3, 55.1, 5.9, 15.0],
    'france': [41.4, 51.1, -5.1, 9.6],
    'spain': [27.6, 43.8, -18.2, 4.3],
    'italy': [35.5, 47.1, 6.6, 18.5],
    'united kingdom': [49.9, 60.8, -8.6, 1.8],
    'netherlands': [50.8, 53.6, 3.4, 7.2],
    'belgium': [49.5, 51.5, 2.5, 6.4],
    'czech republic': [48.6, 51.1, 12.1, 18.9],
    'austria': [46.4, 49.0, 9.5, 17.2],
    'switzerland': [45.8, 47.8, 5.9, 10.5],
    'slovakia': [47.7, 49.6, 16.8, 22.6],
    'hungary': [45.7, 48.6, 16.1, 22.9],
    'romania': [43.6, 48.3, 20.3, 29.7],
    'bulgaria': [41.2, 44.2, 22.4, 28.6],
    'greece': [34.8, 41.7, 19.4, 29.6],
    'turkey': [35.8, 42.1, 25.7, 44.8],
    'norway': [57.9, 71.2, 4.6, 31.3],
    'sweden': [55.3, 69.1, 11.1, 24.2],
    'finland': [59.8, 70.1, 20.5, 31.6],
    'denmark': [54.6, 57.8, 8.1, 15.2],
    'portugal': [32.4, 42.2, -31.3, -6.2],
    'ireland': [51.4, 55.4, -10.5, -6.0],
    'croatia': [42.4, 46.5, 13.5, 19.4],
    'serbia': [42.2, 46.2, 18.8, 23.0],
    'bosnia and herzegovina': [42.6, 45.3, 15.7, 19.6],
    'slovenia': [45.4, 46.9, 13.4, 16.6],
    'montenegro': [41.9, 43.5, 18.4, 20.4],
    'north macedonia': [40.9, 42.4, 20.5, 23.0],
    'albania': [39.6, 42.7, 19.3, 21.1],
    'latvia': [55.7, 58.1, 21.0, 28.2],
    'lithuania': [53.9, 56.4, 21.0, 26.8],
    'estonia': [57.5, 59.7, 21.8, 28.2],
    'moldova': [45.5, 48.5, 26.6, 30.1],
    'belarus': [51.3, 56.2, 23.2, 32.8],
    'usa': [24.4, 71.4, -179.1, -66.9],
    'canada': [41.7, 83.1, -141.0, -52.6],
    'japan': [24.0, 45.6, 122.9, 153.9],
    'south korea': [33.1, 38.6, 124.6, 131.9],
    'china': [18.2, 53.6, 73.5, 134.8],
    'australia': [-43.6, -10.7, 113.3, 153.6],
}


def get_country_bounds(country_name: str) -> Optional[
    Tuple[float, float, float, float]]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∫—Ä–∞—ó–Ω–∏ –∑–∞ –Ω–∞–∑–≤–æ—é"""
    country_key = country_name.lower().strip()

    # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å
    if country_key in COUNTRY_COORDINATES:
        bounds = COUNTRY_COORDINATES[country_key]
        return bounds[0], bounds[1], bounds[2], bounds[
            3]  # min_lat, max_lat, min_lon, max_lon

    # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —á–∞—Å—Ç–∫–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å
    for key in COUNTRY_COORDINATES:
        if country_key in key or key in country_key:
            bounds = COUNTRY_COORDINATES[key]
            return bounds[0], bounds[1], bounds[2], bounds[3]

    return None


def analyze_aircraft_distribution(aircraft_states: List) -> Dict:
    """–ê–Ω–∞–ª—ñ–∑ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ª—ñ—Ç–∞–∫—ñ–≤"""
    analysis = {
        'total_aircraft': len(aircraft_states),
        'active_flights': 0,
        'ground_aircraft': 0,
        'countries': Counter(),
        'altitudes': {'low': 0, 'medium': 0, 'high': 0, 'unknown': 0},
        'speeds': {'slow': 0, 'medium': 0, 'fast': 0, 'unknown': 0},
        'aircraft_types': Counter(),
        'major_airlines': Counter(),
    }

    for state in aircraft_states:
        # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–æ—Ç—É
        if state.on_ground:
            analysis['ground_aircraft'] += 1
        else:
            analysis['active_flights'] += 1

        # –ö—Ä–∞—ó–Ω–∏
        if state.origin_country:
            analysis['countries'][state.origin_country] += 1

        # –í–∏—Å–æ—Ç–∞
        if state.baro_altitude:
            if state.baro_altitude < 3000:  # < 3km
                analysis['altitudes']['low'] += 1
            elif state.baro_altitude < 10000:  # 3-10km
                analysis['altitudes']['medium'] += 1
            else:  # > 10km
                analysis['altitudes']['high'] += 1
        else:
            analysis['altitudes']['unknown'] += 1

        # –®–≤–∏–¥–∫—ñ—Å—Ç—å
        if state.velocity:
            speed_kmh = state.velocity * 3.6
            if speed_kmh < 200:
                analysis['speeds']['slow'] += 1
            elif speed_kmh < 800:
                analysis['speeds']['medium'] += 1
            else:
                analysis['speeds']['fast'] += 1
        else:
            analysis['speeds']['unknown'] += 1

        # –ê–≤—ñ–∞–∫–æ–º–ø–∞–Ω—ñ—ó (–∑ –ø–æ–∑–∏–≤–Ω–æ–≥–æ)
        if state.callsign and len(state.callsign.strip()) >= 3:
            airline_code = state.callsign.strip()[:3]
            analysis['major_airlines'][airline_code] += 1

    return analysis


def get_traffic_density_analysis(aircraft_states: List, bounds: Tuple) -> Dict:
    """–ê–Ω–∞–ª—ñ–∑ —â—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ç—Ä–∞—Ñ—ñ–∫—É"""
    min_lat, max_lat, min_lon, max_lon = bounds

    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø—Ä–æ—Å—Ç—ñ—Ä –Ω–∞ —Å—ñ—Ç–∫—É 10x10
    grid_size = 10
    lat_step = (max_lat - min_lat) / grid_size
    lon_step = (max_lon - min_lon) / grid_size

    grid_density = defaultdict(int)

    for state in aircraft_states:
        if state.latitude and state.longitude:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –≤ —Å—ñ—Ç—Ü—ñ
            lat_idx = min(int((state.latitude - min_lat) / lat_step), grid_size - 1)
            lon_idx = min(int((state.longitude - min_lon) / lon_step), grid_size - 1)
            grid_density[(lat_idx, lon_idx)] += 1

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π—â—ñ–ª—å–Ω—ñ—à—ñ –∑–æ–Ω–∏
    sorted_density = sorted(grid_density.items(), key=lambda x: x[1], reverse=True)

    return {
        'total_zones': len(grid_density),
        'max_density': sorted_density[0][1] if sorted_density else 0,
        'top_zones': sorted_density[:5],
        'average_density': sum(grid_density.values()) / len(
            grid_density) if grid_density else 0
    }


@tool("analyze_country_airspace")
def analyze_country_airspace(country_name: str) -> str:
    """
    –ü—Ä–æ–≤–æ–¥–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏—Ç—É–∞—Ü—ñ—ó –≤ –∞–≤—ñ–∞–ø—Ä–æ—Å—Ç–æ—Ä—ñ –≤–∫–∞–∑–∞–Ω–æ—ó –∫—Ä–∞—ó–Ω–∏

    Args:
        country_name (str): –ù–∞–∑–≤–∞ –∫—Ä–∞—ó–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "Poland", "Ukraine", "Germany")
    Returns:
        str: –î–µ—Ç–∞–ª—å–Ω–∏–π HTML-–∞–Ω–∞–ª—ñ–∑ —Å–∏—Ç—É–∞—Ü—ñ—ó –≤ –∞–≤—ñ–∞–ø—Ä–æ—Å—Ç–æ—Ä—ñ
    """

    result_parts = []

    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
        open_sky_client = OpenSkyClient()
        result_parts.append(f"üåç –ê–Ω–∞–ª—ñ–∑ –∞–≤—ñ–∞–ø—Ä–æ—Å—Ç–æ—Ä—É –∫—Ä–∞—ó–Ω–∏: {country_name.upper()}")

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫—Ä–∞—ó–Ω–∏
        bounds = get_country_bounds(country_name)
        if not bounds:
            return f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –∫—Ä–∞—ó–Ω–∏: {country_name}. –î–æ—Å—Ç—É–ø–Ω—ñ –∫—Ä–∞—ó–Ω–∏: {', '.join(list(COUNTRY_COORDINATES.keys())[:10])}..."

        min_lat, max_lat, min_lon, max_lon = bounds
        result_parts.append(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ–±–ª–∞—Å—Ç—ñ –∞–Ω–∞–ª—ñ–∑—É:")
        result_parts.append(f"  –®–∏—Ä–æ—Ç–∞: {min_lat}¬∞ - {max_lat}¬∞")
        result_parts.append(f"  –î–æ–≤–≥–æ—Ç–∞: {min_lon}¬∞ - {max_lon}¬∞")

    except Exception as e:
        return f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}"

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö —Å—Ç–∞–Ω—ñ–≤ –ª—ñ—Ç–∞–∫—ñ–≤ –≤ —Ä–µ–≥—ñ–æ–Ω—ñ
    try:
        current_time = int(time.time())

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ get_states –∑ bbox
        bbox = (min_lat, max_lat, min_lon, max_lon)
        aircraft_states = open_sky_client.get_states(bbox=bbox)

        if not aircraft_states:
            result_parts.append("\n‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ª—ñ—Ç–∞–∫—ñ–≤ —É –≤–∫–∞–∑–∞–Ω–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ")
            aircraft_states = []
        else:
            result_parts.append(f"\n‚úàÔ∏è –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            result_parts.append(f"–í—Å—å–æ–≥–æ –ª—ñ—Ç–∞–∫—ñ–≤ —É —Ä–µ–≥—ñ–æ–Ω—ñ: {len(aircraft_states)}")

    except Exception as e:
        result_parts.append(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –ª—ñ—Ç–∞–∫—ñ–≤: {e}")
        aircraft_states = []

    # –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ª—ñ—Ç–∞–∫—ñ–≤
    if aircraft_states:
        try:
            distribution = analyze_aircraft_distribution(aircraft_states)

            result_parts.append(f"\nüìä –†–û–ó–ü–û–î–Ü–õ –õ–Ü–¢–ê–ö–Ü–í:")
            result_parts.append(f"  –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–ª—å–æ—Ç–∏: {distribution['active_flights']}")
            result_parts.append(f"  –ù–∞ –∑–µ–º–ª—ñ: {distribution['ground_aircraft']}")

            # –¢–æ–ø-5 –∫—Ä–∞—ó–Ω –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª—ñ—Ç–∞–∫—ñ–≤
            result_parts.append(f"\nüåê –¢–û–ü-5 –ö–†–ê–á–ù –ó–ê –ö–Ü–õ–¨–ö–Ü–°–¢–Æ –õ–Ü–¢–ê–ö–Ü–í:")
            for country, count in distribution['countries'].most_common(5):
                result_parts.append(f"  {country}: {count} –ª—ñ—Ç–∞–∫—ñ–≤")

            # –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ –≤–∏—Å–æ—Ç–æ—é
            result_parts.append(f"\nüìè –†–û–ó–ü–û–î–Ü–õ –ó–ê –í–ò–°–û–¢–û–Æ:")
            result_parts.append(f"  –ù–∏–∑—å–∫–∞ (<3–∫–º): {distribution['altitudes']['low']}")
            result_parts.append(
                f"  –°–µ—Ä–µ–¥–Ω—è (3-10–∫–º): {distribution['altitudes']['medium']}")
            result_parts.append(
                f"  –í–∏—Å–æ–∫–∞ (>10–∫–º): {distribution['altitudes']['high']}")
            result_parts.append(f"  –ù–µ–≤—ñ–¥–æ–º–∞: {distribution['altitudes']['unknown']}")

            # –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—é
            result_parts.append(f"\nüöÄ –†–û–ó–ü–û–î–Ü–õ –ó–ê –®–í–ò–î–ö–Ü–°–¢–Æ:")
            result_parts.append(
                f"  –ü–æ–≤—ñ–ª—å–Ω—ñ (<200–∫–º/–≥): {distribution['speeds']['slow']}")
            result_parts.append(
                f"  –°–µ—Ä–µ–¥–Ω—ñ (200-800–∫–º/–≥): {distribution['speeds']['medium']}")
            result_parts.append(
                f"  –®–≤–∏–¥–∫—ñ (>800–∫–º/–≥): {distribution['speeds']['fast']}")
            result_parts.append(f"  –ù–µ–≤—ñ–¥–æ–º–∞: {distribution['speeds']['unknown']}")

            # –¢–æ–ø –∞–≤—ñ–∞–∫–æ–º–ø–∞–Ω—ñ—ó
            if distribution['major_airlines']:
                result_parts.append(f"\nüè¢ –¢–û–ü-5 –ê–í–Ü–ê–ö–û–ú–ü–ê–ù–Ü–ô –ó–ê –ü–û–ó–ò–í–ù–ò–ú–ò:")
                for airline, count in distribution['major_airlines'].most_common(5):
                    result_parts.append(f"  {airline}: {count} –ª—ñ—Ç–∞–∫—ñ–≤")

        except Exception as e:
            result_parts.append(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É: {e}")

    # –ê–Ω–∞–ª—ñ–∑ —â—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ç—Ä–∞—Ñ—ñ–∫—É
    if aircraft_states:
        try:
            density_analysis = get_traffic_density_analysis(aircraft_states, bounds)

            result_parts.append(f"\nüó∫Ô∏è –ê–ù–ê–õ–Ü–ó –©–Ü–õ–¨–ù–û–°–¢–Ü –¢–†–ê–§–Ü–ö–£:")
            result_parts.append(
                f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —â—ñ–ª—å–Ω—ñ—Å—Ç—å –≤ –∑–æ–Ω—ñ: {density_analysis['max_density']} –ª—ñ—Ç–∞–∫—ñ–≤")
            result_parts.append(
                f"  –°–µ—Ä–µ–¥–Ω—è —â—ñ–ª—å–Ω—ñ—Å—Ç—å: {density_analysis['average_density']:.1f} –ª—ñ—Ç–∞–∫—ñ–≤ –Ω–∞ –∑–æ–Ω—É")
            result_parts.append(f"  –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–æ–Ω: {density_analysis['total_zones']}")

        except Exception as e:
            result_parts.append(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —â—ñ–ª—å–Ω–æ—Å—Ç—ñ: {e}")

    # –ê–Ω–∞–ª—ñ–∑ –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –ª—ñ—Ç–∞–∫—ñ–≤
    if aircraft_states:
        try:
            result_parts.append(f"\nüîç –î–ï–¢–ê–õ–Ü –ù–ê–ô–ê–ö–¢–ò–í–ù–Ü–®–ò–• –õ–Ü–¢–ê–ö–Ü–í:")

            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—é —Ç–∞ –≤–∏—Å–æ—Ç–æ—é
            active_aircraft = [state for state in aircraft_states if
                               not state.on_ground and state.velocity]
            active_aircraft.sort(key=lambda x: x.velocity or 0, reverse=True)

            for i, state in enumerate(active_aircraft[:5]):  # –¢–æ–ø-5
                result_parts.append(f"  –õ—ñ—Ç–∞–∫ {i + 1}:")
                result_parts.append(f"    ICAO24: {state.icao24}")
                result_parts.append(f"    –ü–æ–∑–∏–≤–Ω–∏–π: {state.callsign or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}")
                result_parts.append(f"    –ö—Ä–∞—ó–Ω–∞: {state.origin_country}")
                if state.velocity:
                    result_parts.append(
                        f"    –®–≤–∏–¥–∫—ñ—Å—Ç—å: {state.velocity * 3.6:.0f} –∫–º/–≥–æ–¥")
                if state.baro_altitude:
                    result_parts.append(f"    –í–∏—Å–æ—Ç–∞: {state.baro_altitude:.0f} –º")
                if state.latitude and state.longitude:
                    result_parts.append(
                        f"    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {state.latitude:.4f}, {state.longitude:.4f}")

        except Exception as e:
            result_parts.append(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –ª—ñ—Ç–∞–∫—ñ–≤: {e}")

    # –ü–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö —á–∞—Å—Ç–∏–Ω–∞—Ö –∫—Ä–∞—ó–Ω–∏
    try:
        result_parts.append(f"\nüå§Ô∏è –ü–û–ì–û–î–ù–Ü –£–ú–û–í–ò –í –†–ï–ì–Ü–û–ù–Ü:")

        # –ë–µ—Ä–µ–º–æ 4 —Ç–æ—á–∫–∏: —Ü–µ–Ω—Ç—Ä —Ç–∞ –∫—É—Ç–∏
        weather_points = [
            ("–¶–µ–Ω—Ç—Ä", (min_lat + max_lat) / 2, (min_lon + max_lon) / 2),
            ("–ü—ñ–≤–Ω.-–ó–∞—Ö.", max_lat - (max_lat - min_lat) * 0.2,
             min_lon + (max_lon - min_lon) * 0.2),
            ("–ü—ñ–≤–¥.-–°—Ö.", min_lat + (max_lat - min_lat) * 0.2,
             max_lon - (max_lon - min_lon) * 0.2),
        ]

        for location, lat, lon in weather_points:
            try:
                weather = get_current_weather(lat=lat, lon=lon)
                result_parts.append(f"  {location} ({lat:.2f}, {lon:.2f}):")
                for key, value in weather.items():
                    if value and key in ['temperature', 'wind_speed', 'wind_direction',
                                         'visibility']:
                        result_parts.append(
                            f"    {key.replace('_', ' ').title()}: {value}")
            except:
                result_parts.append(f"  {location}: –ü–æ–≥–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    except Exception as e:
        result_parts.append(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏: {e}")

    # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    if aircraft_states:
        result_parts.append(f"\nüìà –ê–ù–ê–õ–Ü–ó –¢–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")

        active_ratio = (distribution['active_flights'] / len(
            aircraft_states)) * 100 if aircraft_states else 0
        high_altitude_ratio = (distribution['altitudes']['high'] / len(
            aircraft_states)) * 100 if aircraft_states else 0

        if active_ratio > 80:
            result_parts.append("  üü¢ –í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ–≥–æ —Ä—É—Ö—É")
        elif active_ratio > 50:
            result_parts.append("  üü° –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ–≥–æ —Ä—É—Ö—É")
        else:
            result_parts.append("  üî¥ –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ–≥–æ —Ä—É—Ö—É")

        if high_altitude_ratio > 60:
            result_parts.append("  ‚úàÔ∏è –ü–µ—Ä–µ–≤–∞–∂–∞—é—Ç—å –≤–∏—Å–æ—Ç–Ω—ñ –ø–æ–ª—å–æ—Ç–∏ (–∫–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –∞–≤—ñ–∞—Ü—ñ—è)")
        else:
            result_parts.append("  üöÅ –ó–º—ñ—à–∞–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫ —Ä—ñ–∑–Ω–∏—Ö –≤–∏—Å–æ—Ç")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∞–≤—ñ–∞—Ü—ñ—ó
        result_parts.append("  üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        if density_analysis.get('max_density', 0) > 10:
            result_parts.append("    ‚Ä¢ –ü—ñ–¥–≤–∏—â–µ–Ω–∞ —É–≤–∞–≥–∞ –≤ –∑–æ–Ω–∞—Ö –≤–∏—Å–æ–∫–æ—ó —â—ñ–ª—å–Ω–æ—Å—Ç—ñ")
        if distribution['altitudes']['unknown'] > len(aircraft_states) * 0.3:
            result_parts.append("    ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤–∏—Å–æ—Ç")

    result_parts.append(f"\n‚úÖ –ê–Ω–∞–ª—ñ–∑ –∞–≤—ñ–∞–ø—Ä–æ—Å—Ç–æ—Ä—É {country_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    result_text = '\n'.join(result_parts)

    # –û–±—Ä–æ–±–∫–∞ —á–µ—Ä–µ–∑ LLM –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML
    try:
        llm = ChatOpenAI(model="gpt-4o", temperature=0.7)

        analysis_prompt = f"""–û—Å—å –ø–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∞–≤—ñ–∞–ø—Ä–æ—Å—Ç–æ—Ä—É –∫—Ä–∞—ó–Ω–∏:
                        {result_text}

                        –°—Ç–≤–æ—Ä–∏ —Å—É—á–∞—Å–Ω–∏–π, —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π HTML-–∫–æ–¥ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ü—å–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É.
                        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π:
                        - –°—É—á–∞—Å–Ω–∏–π –¥–∏–∑–∞–π–Ω –∑ –∫–∞—Ä—Ç–∫–∞–º–∏ —Ç–∞ —ñ–∫–æ–Ω–∫–∞–º–∏
                        - –ö–æ–ª—å–æ—Ä–æ–≤–µ –∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
                        - –ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π Chart.js –∞–±–æ –ø–æ–¥—ñ–±–Ω—ñ)
                        - Responsive –¥–∏–∑–∞–π–Ω
                        - –ê–Ω—ñ–º–∞—Ü—ñ—ó —Ç–∞ hover-–µ—Ñ–µ–∫—Ç–∏
                        - –¢–µ–º–Ω—É –∞–±–æ —Å–≤—ñ—Ç–ª—É —Ç–µ–º—É –Ω–∞ –≤–∏–±—ñ—Ä

                        –û–ë–û–í'–Ø–ó–ö–û–í–û! –ü–û–í–ï–†–¢–ê–ô –í–ò–ö–õ–Æ–ß–ù–û HTML –ö–û–î, –ë–ï–ó –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –¢–ê
                        –¢–ï–ì–Ü–í, –£ –ß–ò–°–¢–û–ú–£ –í–ò–ì–õ–Ø–î–Ü, –ù–ï –ó–ê–ö–†–ò–í–ê–ô –ô–û–ì–û –£ ```html 
                        –ß–ò –©–û–°–¨ –ü–û–î–Ü–ë–ù–ï. –í–ò–ö–õ–Æ–ß–ù–û –ß–ò–°–¢–ò–ô –ö–û–î!

                        –î–æ–¥–∞–π –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ –ø—Ä–æ —Å—Ç–∞–Ω –∞–≤—ñ–∞–ø—Ä–æ—Å—Ç–æ—Ä—É —Ç–∞ –º–æ–∂–ª–∏–≤—ñ —Ä–∏–∑–∏–∫–∏ —á–∏ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ.
                        """

        response = llm.invoke(analysis_prompt)
        return response.content

    except Exception as e:
        result_parts.append(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ LLM: {e}")
        return '\n'.join(result_parts)


@tool("analysis_info_about_aircraft")
def analysis_info_about_aircraft(hex_code: str) -> str:
    """
    Prepares a detailed analysis of the aircraft based on its hex code

    Args:
        hex_code (str): Hex code of the aircraft.
    Returns:
        str: Detailed analysis of all available information about the aircraft
    """

    result_parts = []

    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenSky –∫–ª—ñ—î–Ω—Ç–∞
        open_sky_client = OpenSkyClient()
        result_parts.append(f"üîç –ê–Ω–∞–ª—ñ–∑ –ª—ñ—Ç–∞–∫–∞ –∑ HEX –∫–æ–¥–æ–º: {hex_code.upper()}")

    except Exception as e:
        return f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó OpenSky –∫–ª—ñ—î–Ω—Ç–∞: {e}"

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–ª—å–æ—Ç–∏ –ª—ñ—Ç–∞–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
    aircraft_info = None
    try:
        begin_time = int(time.time()) - 86400 * 7
        end_time = int(time.time())
        aircraft_info = open_sky_client.get_flights_by_aircraft(
            icao24=hex_code,
            begin=begin_time,
            end=end_time,
        )

        if aircraft_info:
            result_parts.append(f"\n‚úàÔ∏è –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ü–û–õ–¨–û–¢–ò (–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤):")
            result_parts.append(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ª—å–æ—Ç—ñ–≤: {len(aircraft_info)}")

            for i, flight in enumerate(aircraft_info[:3]):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 –ø–æ–ª—å–æ—Ç–∏
                result_parts.append(f"  –†–µ–π—Å {i + 1}:")
                result_parts.append(f"    –ü–æ–∑–∏–≤–Ω–∏–π: {flight.callsign or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}")
                result_parts.append(
                    f"    –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {flight.est_departure_airport or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}")
                result_parts.append(
                    f"    –ü—Ä–∏–±—É—Ç—Ç—è: {flight.est_arrival_airport or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}")
                result_parts.append(
                    f"    –ü–æ—á–∞—Ç–æ–∫: {time.strftime('%Y-%m-%d %H:%M', time.gmtime(flight.first_seen))}")
                result_parts.append(
                    f"    –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {time.strftime('%Y-%m-%d %H:%M', time.gmtime(flight.last_seen))}")
        else:
            result_parts.append("\n‚ö†Ô∏è –ü–æ–ª—å–æ—Ç–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")

    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–ª—å–æ—Ç–∏: {e}")
        result_parts.append(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ª—å–æ—Ç—ñ–≤: {e}")

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª—ñ—Ç–∞–∫–∞
    image_url = None
    try:
        aircraft_image_dict = open_sky_client.get_image_of_aircraft(hex_code)

        if aircraft_image_dict and aircraft_image_dict.get("photos") and len(
                aircraft_image_dict["photos"]) > 0:
            image_url = aircraft_image_dict["photos"][0]["thumbnail"]["src"]
            result_parts.append(f"\nüì∏ –§–û–¢–û –õ–Ü–¢–ê–ö–ê: {image_url}")
        else:
            result_parts.append("\nüì∏ –§–æ—Ç–æ –ª—ñ—Ç–∞–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª—ñ—Ç–∞–∫–∞: {e}")
        result_parts.append(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –ª—ñ—Ç–∞–∫–∞
    current_state = None
    try:
        current_state = open_sky_client.get_current_aircraft_state(hex_code)

        if current_state:
            result_parts.append(f"\nüõ©Ô∏è –ü–û–¢–û–ß–ù–ò–ô –°–¢–ê–ù –õ–Ü–¢–ê–ö–ê:")
            result_parts.append(f"  –ü–æ–∑–∏–≤–Ω–∏–π: {current_state.callsign or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}")
            result_parts.append(f"  –ö—Ä–∞—ó–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {current_state.origin_country}")
            result_parts.append(f"  –°—Ç–∞—Ç—É—Å: {current_state.status}")
            result_parts.append(
                f"  –ù–∞ –∑–µ–º–ª—ñ: {'–¢–∞–∫' if current_state.on_ground else '–ù—ñ'}")

            if current_state.latitude and current_state.longitude:
                result_parts.append(
                    f"  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {current_state.latitude:.4f}, {current_state.longitude:.4f}")
                result_parts.append(
                    f"  –í–∏—Å–æ—Ç–∞: {current_state.altitude_ft:.0f} —Ñ—É—Ç—ñ–≤ ({current_state.baro_altitude:.0f} –º)" if current_state.altitude_ft else "  –í–∏—Å–æ—Ç–∞: –ù–µ–≤—ñ–¥–æ–º–∞")
                result_parts.append(
                    f"  –®–≤–∏–¥–∫—ñ—Å—Ç—å: {current_state.speed_kmh:.0f} –∫–º/–≥–æ–¥" if current_state.speed_kmh else "  –®–≤–∏–¥–∫—ñ—Å—Ç—å: –ù–µ–≤—ñ–¥–æ–º–∞")
                result_parts.append(
                    f"  –ö—É—Ä—Å: {current_state.true_track:.0f}¬∞" if current_state.true_track else "  –ö—É—Ä—Å: –ù–µ–≤—ñ–¥–æ–º–∏–π")
        else:
            result_parts.append("\n‚ö†Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ª—ñ—Ç–∞–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")

    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É: {e}")
        result_parts.append(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É: {e}")

    # –ê–Ω–∞–ª—ñ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–æ—Ç—É
    is_active_flight = current_state and current_state.status in ["Active (Live)",
                                                                  "Recent (< 5 min)"] and not current_state.on_ground

    if is_active_flight and aircraft_info:
        result_parts.append(f"\nüöÅ –ê–ö–¢–ò–í–ù–ò–ô –ü–û–õ–Ü–¢ –í–ò–Ø–í–õ–ï–ù–û!")

        # –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–µ–π—Å
        last_flight = aircraft_info[0] if aircraft_info else None

        if last_flight:
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç
            result_parts.append(f"\nüõ´ –ú–ê–†–®–†–£–¢ –ü–û–õ–¨–û–¢–£:")
            result_parts.append(
                f"  –ó–≤—ñ–¥–∫–∏: {last_flight.est_departure_airport or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}")
            result_parts.append(
                f"  –ö—É–¥–∏: {last_flight.est_arrival_airport or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}")

            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–µ—Ä–æ–ø–æ—Ä—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            if last_flight.est_departure_airport:
                try:
                    start_airport = open_sky_client.get_airport_info(
                        last_flight.est_departure_airport)
                    if start_airport:
                        result_parts.append(
                            f"\nüõ´ –ê–ï–†–û–ü–û–†–¢ –í–Ü–î–ü–†–ê–í–õ–ï–ù–ù–Ø ({last_flight.est_departure_airport}):")
                        result_parts.append(
                            f"  –ù–∞–∑–≤–∞: {start_airport.get('name', '–ù–µ–≤—ñ–¥–æ–º–∞')}")
                        result_parts.append(
                            f"  –ú—ñ—Å—Ç–æ: {start_airport.get('municipality', '–ù–µ–≤—ñ–¥–æ–º–µ')}")
                        result_parts.append(
                            f"  –ö—Ä–∞—ó–Ω–∞: {start_airport.get('iso_country', '–ù–µ–≤—ñ–¥–æ–º–∞')}")
                        result_parts.append(
                            f"  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {start_airport.get('latitude_deg', 'N/A')}, {start_airport.get('longitude_deg', 'N/A')}")
                except Exception as e:
                    print(
                        f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏ –≤ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—ñ –ª—ñ—Ç–∞–∫–∞: {e}")
                    result_parts.append(
                        f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—ñ")

            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–µ—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–±—É—Ç—Ç—è
            if last_flight.est_arrival_airport:
                try:
                    end_airport = open_sky_client.get_airport_info(
                        last_flight.est_arrival_airport)
                    if end_airport:
                        result_parts.append(
                            f"\nüõ¨ –ê–ï–†–û–ü–û–†–¢ –ü–†–ò–ë–£–¢–¢–Ø ({last_flight.est_arrival_airport}):")
                        result_parts.append(
                            f"  –ù–∞–∑–≤–∞: {end_airport.get('name', '–ù–µ–≤—ñ–¥–æ–º–∞')}")
                        result_parts.append(
                            f"  –ú—ñ—Å—Ç–æ: {end_airport.get('municipality', '–ù–µ–≤—ñ–¥–æ–º–µ')}")
                        result_parts.append(
                            f"  –ö—Ä–∞—ó–Ω–∞: {end_airport.get('iso_country', '–ù–µ–≤—ñ–¥–æ–º–∞')}")
                        result_parts.append(
                            f"  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {end_airport.get('latitude_deg', 'N/A')}, {end_airport.get('longitude_deg', 'N/A')}")

                        # –ü–æ–≥–æ–¥–∞ –≤ –∞–µ—Ä–æ–ø–æ—Ä—Ç—ñ –ø—Ä–∏–±—É—Ç—Ç—è
                        if end_airport.get('latitude_deg') and end_airport.get(
                                'longitude_deg'):
                            try:
                                airport_weather = get_current_weather(
                                    lat=end_airport['latitude_deg'],
                                    lon=end_airport['longitude_deg']
                                )
                                result_parts.append(
                                    f"\nüå¶Ô∏è –ü–û–ì–û–î–ê –í –ê–ï–†–û–ü–û–†–¢–Ü –ü–†–ò–ë–£–¢–¢–Ø:")
                                for key, value in airport_weather.items():
                                    if value:
                                        result_parts.append(
                                            f"  {key.replace('_', ' ').title()}: {value}")
                            except Exception as e:
                                print(
                                    f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏ –≤ –∞–µ—Ä–æ–ø–æ—Ä—Ç—ñ –ø—Ä–∏–±—É—Ç—Ç—è: {e}")
                                result_parts.append(
                                    f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –≤ –∞–µ—Ä–æ–ø–æ—Ä—Ç—ñ –ø—Ä–∏–±—É—Ç—Ç—è")

                except Exception as e:
                    print(
                        f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–µ—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–±—É—Ç—Ç—è: {e}")
                    result_parts.append(
                        f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–µ—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–±—É—Ç—Ç—è")

    elif current_state and current_state.on_ground:
        result_parts.append(f"\nüõ¨ –õ—ñ—Ç–∞–∫ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –∑–µ–º–ª—ñ")
    elif current_state:
        result_parts.append(
            f"\n‚è∏Ô∏è –õ—ñ—Ç–∞–∫ –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—å–æ—Ç—ñ (—Å—Ç–∞—Ç—É—Å: {current_state.status})")
    else:
        result_parts.append(f"\n‚ùì –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ª—ñ—Ç–∞–∫–∞")

    result_parts.append(f"\n‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    result_text = '\n'.join(result_parts)

    # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —á–µ—Ä–µ–∑ LLM
    llm = ChatOpenAI(model="gpt-4o", temperature=0.7)

    analysis_prompt = f"""–û—Å—å —É—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ –ø–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ–º—É —Å—É–¥–Ω—É:
                    {result_text}
                    –ü—Ä–æ–≤–µ–¥–∏ –≥–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ —É—Å—ñ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.
                    –ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ html –∫–æ–¥ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å—ñ—Ö –¥–∞–Ω–∏—Ö —Ç–∞ 
                    –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–º –æ–ø–∏—Å–æ–º —è–∫ –Ω–∞ —Ç–≤–æ—é –¥—É–º–∫—É —Ç—ñ —á–∏ —ñ–Ω—à—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ 
                    –º–æ–∂—É—Ç—å –ø–æ–≤–ø–ª–∏–≤–∞—Ç–∏ –Ω–∞ —Å—É–¥–Ω–æ, –ø–µ—Ä–µ–ª—ñ—Ç —á–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ—Å–∞–¥–∫–∏.
                    –û–ë–û–í'–Ø–ó–ö–û–í–û! –ü–û–í–ï–†–¢–ê–ô –í–ò–ö–õ–Æ–ß–ù–û –ö–û–î, –ë–ï–ó –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –¢–ê
                    –¢–ï–ì–Ü–í, –£ –ß–ò–°–¢–û–ú–£ –í–ò–ì–õ–Ø–î–Ü, –ù–ï –ó–ê–ö–†–ò–í–ê–ô –ô–û–ì–û –£ ```html '''
                    –ß–ò –©–û–°–¨ –ü–û–î–Ü–ë–ù–ï. –í–ò–ö–õ–Æ–ß–ù–û –ß–ò–°–¢–ò–ô –ö–û–î!
                    """

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LLM
    response = llm.invoke(analysis_prompt)

    return response.content


class AviationAnalysisAgent:
    def __init__(self, agent_id: str, name: str, system_prompt: str = None):
        self.agent_id = agent_id
        self.name = name
        self.llm = ChatOpenAI(model="gpt-4o", temperature=0.7)

        # Set up default backstory if none provided
        backstory = system_prompt if system_prompt else """
        You are a versatile aviation analysis assistant designed to help users with 
        comprehensive aircraft and airspace analysis.
        You have access to specialized tools to perform detailed aviation-related tasks.

        When processing requests, you should:
        1. Analyze the user's message to understand their aviation-related intent
        2. Use appropriate tools to fulfill the request
        3. Provide clear, detailed, and accurate aviation analysis
        4. Adapt to the context of the user's aviation query

        Available Tools:
        1) For analyzing a specific aircraft: use "analysis_info_about_aircraft" 
           - Requires hexadecimal aircraft code (e.g., 4891B9)
           - Provides comprehensive aircraft analysis including current state, flight
            history, weather conditions, and photos

        2) For analyzing country airspace: use "analyze_country_airspace"
           - Requires country name (e.g., "Poland", "Ukraine", "Germany")  
           - Provides comprehensive airspace analysis including:
             * Current aircraft distribution and statistics
             * Traffic density analysis
             * Country-specific aviation patterns
             * Weather conditions across the region
             * Active flights analysis
             * Safety recommendations

        Key Features:
        - Real-time aircraft tracking and analysis
        - Comprehensive airspace monitoring
        - Weather integration for aviation safety
        - Historical flight data analysis
        - Interactive HTML visualizations
        - Multi-language support (Ukrainian interface)

        Always be professional, accurate, and provide actionable aviation insights.
        """

        # Create the agent with both tools
        self.agent = Agent(
            role='Aviation Analysis Specialist',
            goal='Provide comprehensive aviation analysis for aircraft and airspace using real-time data and advanced analytical tools',
            backstory=backstory,
            verbose=True,
            allow_delegation=False,
            llm=self.llm,
            tools=[analysis_info_about_aircraft, analyze_country_airspace]
        )

    async def process_message(self, message: str) -> str:
        """Process user message and return appropriate aviation analysis using CrewAI agents and tools."""
        try:
            task = Task(
                description=f"""
                Analyze the user's aviation-related message and respond appropriately using available specialized tools.

                User Message: "{message}"
                Agent ID: {self.agent_id}

                Instructions:
                - Determine if the user wants aircraft analysis or airspace analysis
                - For aircraft analysis: extract hex code and use analysis_info_about_aircraft tool
                - For airspace/country analysis: extract country name and use analyze_country_airspace tool
                - If the request is ambiguous, ask for clarification
                - Provide comprehensive aviation analysis with safety insights
                - Extract relevant parameters (hex codes, country names) carefully
                - Handle both Ukrainian and English inputs

                Examples of requests:
                - "Analyze aircraft 4891B9" ‚Üí use analysis_info_about_aircraft
                - "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Å–∏—Ç—É–∞—Ü—ñ—é –≤ –∞–≤—ñ–∞–ø—Ä–æ—Å—Ç–æ—Ä—ñ –ü–æ–ª—å—â—ñ" ‚Üí use analyze_country_airspace
                - "Show me airspace situation in Germany" ‚Üí use analyze_country_airspace
                - "What's happening with flight ABC123?" ‚Üí may need hex code clarification

                Provide a complete, professional aviation analysis that directly addresses the user's request.
                """,
                expected_output="A comprehensive aviation analysis using appropriate tools, formatted as HTML for optimal visualization",
                agent=self.agent
            )

            crew = Crew(
                agents=[self.agent],
                tasks=[task],
                process=Process.sequential,
                verbose=True
            )

            # Run the crew asynchronously
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(None, crew.kickoff)

            return f"```html-render \n{str(result)} \n```"

        except Exception as e:
            print(f"Error processing message with AviationAnalysisAgent: {str(e)}")
            return f"Sorry, I encountered an error while processing your aviation analysis request: {str(e)}"


# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ—Ä–∏—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É OpenSkyClient
class EnhancedOpenSkyClient(OpenSkyClient):
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∞–≤—ñ–∞–ø—Ä–æ—Å—Ç–æ—Ä—É"""

    def get_country_aircraft_stats(self, country_name: str) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª—ñ—Ç–∞–∫—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫—Ä–∞—ó–Ω–∏"""
        print(f"Country name: {country_name} =====================================")
        bounds = get_country_bounds(country_name)
        print(bounds)
        if not bounds:
            return {"error": f"Country {country_name} not found"}

        bbox = (bounds[0], bounds[1], bounds[2], bounds[3])
        aircraft_states = self.get_states(bbox=bbox)

        if not aircraft_states:
            return {"total": 0, "active": 0, "grounded": 0}

        stats = analyze_aircraft_distribution(aircraft_states)
        return {
            "total": stats['total_aircraft'],
            "active": stats['active_flights'],
            "grounded": stats['ground_aircraft'],
            "countries": dict(stats['countries'].most_common(10)),
            "altitudes": stats['altitudes'],
            "speeds": stats['speeds']
        }

    def get_busiest_airports_in_region(self, country_name: str, days_back: int = 7) -> \
    List[Dict]:
        """–ó–Ω–∞–π—Ç–∏ –Ω–∞–π–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—à—ñ –∞–µ—Ä–æ–ø–æ—Ä—Ç–∏ –≤ —Ä–µ–≥—ñ–æ–Ω—ñ"""
        # –¶–µ–π –º–µ—Ç–æ–¥ –ø–æ—Ç—Ä–µ–±—É—î —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –∞–µ—Ä–æ–ø–æ—Ä—Ç—ñ–≤
        # –¢—É—Ç –±–∞–∑–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        return []

    def get_flight_trends(self, country_name: str, hours_back: int = 24) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ –ø–æ–ª—å–æ—Ç—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –≥–æ–¥–∏–Ω–∏"""
        # –î–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ
        # –¢—É—Ç –±–∞–∑–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        return {
            "trend": "stable",  # "increasing", "decreasing", "stable"
            "peak_hours": [],
            "average_flights_per_hour": 0
        }
